#+title: Platform Problems Solutions
#+author: Alaín Chevanier <[[mailto:alain.chevanier@ciencias.unam.mx][alain.chevanier@ciencias.unam.mx]]>

:PROPERTIES:
:CUSTOM_ID: platform-problems-solutions
:END:
* Objetivo
:PROPERTIES:
:CUSTOM_ID: objetivo
:END:
To be defined

* Indicaciones generales
:PROPERTIES:
:CUSTOM_ID: indicaciones-generales
:END:
Los ejercicios describen un problema a resolver mediante un programa que
debe de implementarse en java.

* Desarrollo
:PROPERTIES:
:CUSTOM_ID: desarrollo
:END:
En esta práctica trabajarás con una base de código construida con Java
17+ y Maven Wrapper, también proveemos pruebas unitarias escritas con la
biblioteca *Junit 5.7.2* que te darán retrospectiva inmediatamente sobre
el funcionamiento de tu implementación.

Para ejecutar las pruebas necesitas ejecutar el siguiente comando:

#+begin_example
$ env ENV=github ./mvnw test
#+end_example

Para ejecutar las pruebas contenidas en una única clase de pruebas,
utiliza un comando como el siguiente:

#+begin_example
$ ./mvnw -Dtest=MyClassTest test
#+end_example

En el código que recibirás la clase *App* tiene un método *main* que
puedes ejecutar como cualquier programa escrito en *Java*. Para eso
primero tienes que empaquetar la aplicación y finalmente ejecutar el jar
generado. Utiliza un comando como el que sigue:

#+begin_example
$ ./mvnw package
... o saltando las pruebas unitarias
$ ./mvnw package -DskipTests
...
...
$ ./mvnw exec:java 
#+end_example

* Configuración de los git hooks para formatear el código
:PROPERTIES:
:CUSTOM_ID: configuración-de-los-git-hooks-para-formatear-el-código
:END:
Antes de empezar a realizar commits que contenga tu solución tienes que
configurar un módulo de git que te ayudará a formatear tu código.

#+begin_example
./mvnw git-code-format:install-hooks
#+end_example



* Problemas
:PROPERTIES:
:CUSTOM_ID: problemas
:END:
** Leetcode
:PROPERTIES:
:CUSTOM_ID: leetcode
:END:
- [[file:src/main/java/solutions/BombsProblem.java][2101. Detonate the Maximum Bombs]]
