#+title: Platform Problems Solutions
#+author: Ala√≠n Chevanier <[[mailto:alain.chevanier@ciencias.unam.mx][alain.chevanier@ciencias.unam.mx]]>

* Goal
I'm solving problems of the [[https://neetcode.io/roadmap][NeetCode Roadmap]] using java, plus some additional problems I found interesting.

* Problems
- [[file:src/main/java/solutions/TwoSum.java][1. Two Sum]]
- [[file:src/main/java/solutions/GroupAnagrams.java][49. Group Anagrams]]
- [[file:src/main/java/solutions/ContainsDuplicate.java][217. Contains Duplicate]]
- [[file:src/main/java/solutions/ValidAnagram.java][242. Valid Anagram]]
- [[file:src/main/java/solutions/DetonateMaximumBombs.java][2101. Detonate the Maximum Bombs]]

* Tools and Technologies
:PROPERTIES:
:CUSTOM_ID: desarrollo
:END:
In this repo you will work with a codebase built with Java 17+ and Maven Wrapper, we also provide unit tests written with the *Junit 5.7.2* library that will give you immediate feedback on the functionality of your implementation.

To run the tests you need to execute the following command:

#+begin_example
$ env ENV=github ./mvnw test
#+end_example


To run the tests contained in a single test class, use a command like the following:

#+begin_example
$ ./mvnw -Dtest=MyClassTest test
#+end_example

The code you will receive has the *App* class with a *main* method that you can run like any program written in *Java*. To do this, you first need to package the application and finally run the generated jar. Use a command like the following:

#+begin_example
$ ./mvnw package
... o saltando las pruebas unitarias
$ ./mvnw package -DskipTests
...
...
$ ./mvnw exec:java 
#+end_example

* How to configure git hooks to format code
Before you start making commits that contain your solution, you need to configure a git module that will help you format your code.

#+begin_example
./mvnw git-code-format:install-hooks
#+end_example

