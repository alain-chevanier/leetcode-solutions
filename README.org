* Platform Problems Solutions
:PROPERTIES:
:CUSTOM_ID: platform-problems-solutions
:END:
Alaín Chevanier
[[mailto:alain.chevanier@ciencias.unam.mx][alain.chevanier@ciencias.unam.mx]]

** Objetivo
:PROPERTIES:
:CUSTOM_ID: objetivo
:END:
To be defined

** Indicaciones generales
:PROPERTIES:
:CUSTOM_ID: indicaciones-generales
:END:
Los ejercicios describen un problema a resolver mediante un programa que
debe de implementarse en java.

** Desarrollo
:PROPERTIES:
:CUSTOM_ID: desarrollo
:END:
En esta práctica trabajarás con una base de código construida con Java
17+ y Maven Wrapper, también proveemos pruebas unitarias escritas con la
biblioteca *Junit 5.7.2* que te darán retrospectiva inmediatamente sobre
el funcionamiento de tu implementación.

Para ejecutar las pruebas necesitas ejecutar el siguiente comando:

#+begin_example
$ env ENV=github ./mvnw test
#+end_example

Para ejecutar las pruebas contenidas en una única clase de pruebas,
utiliza un comando como el siguiente:

#+begin_example
$ ./mvnw -Dtest=MyClassTest test
#+end_example

En el código que recibirás la clase *App* tiene un método *main* que
puedes ejecutar como cualquier programa escrito en *Java*. Para eso
primero tienes que empaquetar la aplicación y finalmente ejecutar el jar
generado. Utiliza un comando como el que sigue:

#+begin_example
$ ./mvnw package
... o saltando las pruebas unitarias
$ ./mvnw package -DskipTests
...
...
$ ./mvnw exec:java 
#+end_example

** Configuración de los git hooks para formatear el código
:PROPERTIES:
:CUSTOM_ID: configuración-de-los-git-hooks-para-formatear-el-código
:END:
Antes de empezar a realizar commits que contenga tu solución tienes que
configurar un módulo de git que te ayudará a formatear tu código.

#+begin_example
./mvnw git-code-format:install-hooks
#+end_example

** Forma de trabajo
:PROPERTIES:
:CUSTOM_ID: forma-de-trabajo
:END:
Recomendamos ampliamente utilizar el editor
[[https://www.jetbrains.com/help/idea/installation-guide.html][IntelliJ]]
para realizar el desarrollo de la práctica. También agrega el plugin de
IntelliJ
[[https://www.sonarsource.com/products/sonarlint/features/jetbrains/][SonarLint]].

** Entrega
:PROPERTIES:
:CUSTOM_ID: entrega
:END:
Deja todo el código con tu solución en la rama *main*, pues por omisión
es esta rama la que compara *Github Classroom* contra la versión inicial
del código mediante el *Pull Request* llamado *Feedback*, el cual
nosotros vamos a revisar para evaluar tu entrega.

Para verificar que tu código cumple con la especificación, en tu *Pull
Request* debes de pasar las dos validaciones que hace *Github Actions*
sobre el código, una de ellas verifica que pasas las pruebas
automatizadas, y la otra que hayas formateado tu código con el plugin de
maven.

Además, no olvides marcar en classroom la tarea como entregada y en ella
incluir el enlace hacia el *Pull Request* que contiene tu solución.

La fecha de entrega de tu práctica va a ser el máximo entre la fecha en
la que abriste el *Pull Request* y la fecha en la que hiciste el último
push al repositorio con tu solución.

** Problemas
:PROPERTIES:
:CUSTOM_ID: problemas
:END:
*** Leetcode
:PROPERTIES:
:CUSTOM_ID: leetcode
:END:
- [[][2101. Detonate the Maximum Bombs]]
